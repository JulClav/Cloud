---
- name: "Create the config directory"
  ansible.builtin.file:
    path: /etc/rabbitmq
    state: directory

- name: "Install RabbitMQ"
  ansible.builtin.apt:
    state: present
    name:
      - erlang-base
      - erlang-asn1
      - erlang-crypto
      - erlang-eldap
      - erlang-ftp
      - erlang-inets
      - erlang-mnesia
      - erlang-os-mon
      - erlang-parsetools
      - erlang-public-key
      - erlang-runtime-tools
      - erlang-snmp
      - erlang-ssl
      - erlang-syntax-tools
      - erlang-tftp
      - erlang-tools
      - erlang-xmerl
      - rabbitmq-server

- name: "Create the config file"
  ansible.builtin.template:
    src: rabbitmq.conf
    dest: /etc/rabbitmq/rabbitmq.conf
  register: config

- name: Generate a cookie (on localhost)
  delegate_to: localhost
  run_once: true
  ansible.builtin.set_fact:
    rabbitmq_cookie: "{{ lookup('password', './instructions/erlang-cookie length=32 chars=ascii_letters,digits') }}"

- name: "Set the cookie"
  ansible.builtin.copy:
    content: "{{ rabbitmq_cookie }}"
    dest: /var/lib/rabbitmq/.erlang.cookie
    owner: rabbitmq
    group: rabbitmq
    mode: '0400'
  register: cookie

- name: "Restart epmd"
  ansible.builtin.systemd:
    name: epmd.service
    state: restarted
    enabled: true
  when: cookie.changed

- name: "Set the cookie for root"
  ansible.builtin.copy:
    content: "{{ rabbitmq_cookie }}"
    dest: /root/.erlang.cookie
    owner: root
    group: root
    mode: '0400'

- name: "Reset RabbitMQ"
  ansible.builtin.shell: rabbitmqctl stop_app && rabbitmqctl reset && rabbitmqctl start_app
  args:
    executable: /bin/bash
  when: config.changed or cookie.changed

- name: "Enable management plugin"
  community.rabbitmq.rabbitmq_plugin:
    state: enabled
    name: rabbitmq_management

- name: "Create a vhost for each group"
  run_once: true
  community.rabbitmq.rabbitmq_vhost:
    name: "{{ item.name }}"
  loop: "{{ instance_groups }}"

- name: "Create a user for each group"
  run_once: true
  community.rabbitmq.rabbitmq_user:
    user: "{{ item.name }}"
    password: '{{ lookup("file", "./instructions/per-group/" + item.name + "/queue") }}'
    state: present
    tags: policymaker
    vhost: "{{ item.name }}"
    configure_priv: .*
    read_priv: .*
    write_priv: .*
  loop: "{{ instance_groups }}"
